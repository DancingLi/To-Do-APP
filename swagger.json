{
  "openapi": "3.0.0",
  "info": {
    "title": "To-Do Checklist API",
    "description": "RESTful API for a comprehensive to-do checklist application with recurring tasks and dependencies",
    "version": "1.0.0",
    "contact": {
      "email": "support@todochecklist.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000/api",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "tasks",
      "description": "Task management"
    },
    {
      "name": "categories",
      "description": "Category management"
    },
    {
      "name": "tags",
      "description": "Tag management"
    },
    {
      "name": "progress",
      "description": "Progress tracking"
    }
  ],
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "required": ["title", "userId"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique task identifier"
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "description": "Task title"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Task description"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Task due date and time"
          },
          "priority": {
            "type": "string",
            "enum": ["Low", "Medium", "High"],
            "default": "Medium",
            "description": "Task priority level"
          },
          "status": {
            "type": "string",
            "enum": ["Todo", "In Progress", "Completed"],
            "default": "Todo",
            "description": "Current status of the task"
          },
          "recurrence": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["None", "Daily", "Weekly", "Monthly"],
                "default": "None",
                "description": "Type of recurrence"
              },
              "interval": {
                "type": "integer",
                "minimum": 1,
                "default": 1,
                "description": "Recurrence interval (e.g., every 2 days)"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "description": "When the recurrence ends (optional)"
              },
              "daysOfWeek": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 6
                },
                "description": "Days of week for weekly recurrence (0=Sunday, 6=Saturday)"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the task"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Tasks that this task depends on"
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "description": "Category this task belongs to"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User who owns this task"
          },
          "isDeleted": {
            "type": "boolean",
            "default": false,
            "description": "Soft delete flag"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the task was completed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the task was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the task was last updated"
          }
        }
      },
      "Category": {
        "type": "object",
        "required": ["name", "userId"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique category identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "Category name"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "default": "#3498db",
            "description": "Category color in hex format"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User who owns this category"
          },
          "order": {
            "type": "integer",
            "default": 0,
            "description": "Display order for categories"
          },
          "isDefault": {
            "type": "boolean",
            "default": false,
            "description": "Whether this is the default category"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "HTTP status code"
              },
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "details": {
                "type": "object",
                "description": "Additional error details"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "UserIdHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "user-id",
        "description": "User ID for authentication (simplified for demo)"
      }
    }
  },
  "security": [
    {
      "UserIdHeader": []
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": ["tasks"],
        "summary": "Get all tasks with filters",
        "description": "Retrieve tasks with optional filtering and sorting",
        "parameters": [
          {
            "name": "priority",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Low", "Medium", "High"]
            },
            "description": "Filter by priority"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Todo", "In Progress", "Completed"]
            },
            "description": "Filter by status"
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by category ID"
          },
          {
            "name": "dueDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by due date"
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by tags (comma-separated)"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search in title and description"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "example": 5
                    },
                    "total": {
                      "type": "integer",
                      "example": 20
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["tasks"],
        "summary": "Create a new task",
        "description": "Create a new task with optional recurrence and dependencies",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "description": "Task ID"
        }
      ],
      "get": {
        "tags": ["tasks"],
        "summary": "Get a task by ID",
        "description": "Retrieve a specific task by ID",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["tasks"],
        "summary": "Update a task",
        "description": "Update an existing task with complete replacement",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["tasks"],
        "summary": "Delete a task",
        "description": "Delete a task by ID",
        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Task deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete task with dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}/dependencies": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "description": "Task ID"
        }
      ],
      "post": {
        "tags": ["tasks"],
        "summary": "Update task dependencies",
        "description": "Add or replace task dependencies",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dependencies updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/recurring": {
      "get": {
        "tags": ["tasks"],
        "summary": "Generate recurring tasks",
        "description": "Process all completed recurring tasks and generate new instances",
        "responses": {
          "200": {
            "description": "Recurring tasks generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "example": 3
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "Get all categories",
        "description": "Retrieve all categories for the current user",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "example": 5
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["categories"],
        "summary": "Create a new category",
        "description": "Create a new category for organizing tasks",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
