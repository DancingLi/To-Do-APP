{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nfunction useLocalStorage(key, initialValue) {\n  _s();\n  // Get from local storage then parse stored json or return initialValue\n  const [value, setValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setStoredValue = val => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = val instanceof Function ? val(value) : val;\n      setValue(valueToStore);\n\n      // Save to local storage\n      if (valueToStore === undefined) {\n        window.localStorage.removeItem(key);\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [value, setStoredValue];\n}\n_s(useLocalStorage, \"6oY50h/LZDmxYw5vd2IUcGm+f/U=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","value","setValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setStoredValue","val","valueToStore","Function","undefined","removeItem","setItem","stringify"],"sources":["E:/OneDrive/PythonTool/To-do Checklist/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // Get from local storage then parse stored json or return initialValue\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\r\n  const setStoredValue = (val) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = val instanceof Function ? val(value) : val;\r\n      setValue(valueToStore);\r\n      \r\n      // Save to local storage\r\n      if (valueToStore === undefined) {\r\n        window.localStorage.removeItem(key);\r\n      } else {\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [value, setStoredValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACvC,IAAI;MACF,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMa,cAAc,GAAIC,GAAG,IAAK;IAC9B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,GAAG,YAAYE,QAAQ,GAAGF,GAAG,CAACZ,KAAK,CAAC,GAAGY,GAAG;MAC/DX,QAAQ,CAACY,YAAY,CAAC;;MAEtB;MACA,IAAIA,YAAY,KAAKE,SAAS,EAAE;QAC9BZ,MAAM,CAACC,YAAY,CAACY,UAAU,CAACnB,GAAG,CAAC;MACrC,CAAC,MAAM;QACLM,MAAM,CAACC,YAAY,CAACa,OAAO,CAACpB,GAAG,EAAES,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;MAChE;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO,CAACR,KAAK,EAAEW,cAAc,CAAC;AAChC;AAACZ,EAAA,CA/BQH,eAAe;AAiCxB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}